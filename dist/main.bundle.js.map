{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vendor/sapient/codebase/src/app/dashboard/views/custom-widget.html","webpack:///./src/vendor/sapient/codebase/src/components/templates/custom.js","webpack:///./src/vendor/sapient/codebase/src/app/dashboard/directives/custom-widget.js","webpack:///./src/vendor/sapient/codebase/src/app/dashboard/core/data-factories/dashboard-data.js","webpack:///./src/vendor/sapient/codebase/src/app/dashboard/core/data-factories/custom-dashboard-data.js","webpack:///./src/vendor/sapient/index.js","webpack:///./src/vendor/index.js","webpack:///./src/services/health/health.js","webpack:///./src/services/index.js","webpack:///./src/components/smart/team-dashboard.html","webpack:///./src/components/smart/team-dashboard.js","webpack:///./src/components/smart/status.html","webpack:///./src/components/smart/status.js","webpack:///./src/components/dumb/form/input-textarea/input-textarea.component.html","webpack:///./src/components/dumb/form/input-textarea/input-textarea.component.js","webpack:///./src/components/dumb/form/input-number/input-number.component.html","webpack:///./src/components/dumb/form/input-number/input-number.component.js","webpack:///./src/components/dumb/form/input-text/input-text.component.html","webpack:///./src/components/dumb/form/input-text/input-text.component.js","webpack:///./src/components/dumb/basic/basic.component.html","webpack:///./src/components/dumb/basic/basic.component.js","webpack:///./src/components/index.js","webpack:///./src/index.js","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./src/styles/lloyds.less?e129","webpack:///./src/styles/lloyds.less?0c05"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","CustomTemplateController","$scope","$rootScope","$http","$q","customDashboardData","dashboardData","widgetHoverText","ctrl","this","response","fetchProjectDetails","selectedChart","_","data","maintainAspectRatio","tooltips","enabled","scales","yAxes","id","type","display","position","ticks","fontSize","xAxes","gridLines","responsive","stacked","beginAtZero","legend","labels","boxWidth","fixedStepSize","selectedDates","toSprint","fromSprint","sprintList","fromCounter","parseInt","toCounter","item","sprint","trim","widgetType","fetchWidgetDetails","then","title","tooltipText","storyDorToDod","storyLeadTime","storyDodToLive","storyLiveLeadTime","storyBacklogToDor","defectInjectionRate","defectInjectionRatePostLive","graphData","length","options","datasetOverride","backgroundColor","borderColor","deploymentFrequency","noOfCheckins","flowEfficiency","countList","monthList","series","statusList","colors","cfdData","cfd","envCreationTime","hoverBackgroundColor","happinessIndex","appDemonstration","sprintPredictablity","symbol","unit","cutoutPercentage","releaseDeployTime","relAndDeployTime","autoPercentage","autoVsManualTest","console","qualityGrade","callbacks","label","codeQuality","undefined","coveragePercentage","jscoveragePercentage","width","jUnitSuccessPercentage","jsJUnitSuccessPercentage","passPercentage","improvement","deferred","defer","fixTimeSVU","buildTimeSVU","sumTestExecution","widgetData","citime","promise","event","button","$","showRadar","d3","commitmentReliability","risks","topIssues","issues","agingIssue","agingIssueLevel","techDebt","sonarTechDebt","assignedValuePercentage","backlogHealthPercentage","assignmentValueTrend","route","startDate","endDate","callback","index","parseFloat","Math","scaleLabel","labelString","trendOverAutoVsManualTest","trendOverAutoVsManual","trendOverFunctionalTestExecutionTime","trendOverCodeBuildTime","trendOverTimeToFixedBrokenBuild","unique","distinct","gradeItem","min","stepSize","max","values","autoSkip","maxTicksLimit","trendOverCodeQuality","trendOverBackEndJUnit","trendOverFrontEndJUnit","sendWidgetDetails","trendOverSprintPredictability","trendOverCommitmentReliability","defectCount","timeToRelease","trendOverStoryLeadTime","trendOverStoryLiveLeadTime","localStorage","angular","HygieiaConfig","customWidgetDirective","templateUrl","restrict","scope","customWidget","fetchData","chartModalDialog","chartModalData","onWidgetClick","link","element","attrs","overlayDiv","textPopup","widgetInfo","sourceOffset","offset","top","left","e","interval","setInterval","clearInterval","modalElement","PRODUCT","TEAM","CUSTOM","testSearchRoute","testDetailRoute","testOwnedRoute","testOwnersRoute","testMatchversion","testLogoImagePath","testAggregateProjectSettingsRoute","dashboardRoute","mydashboardRoute","myownerRoute","updateBusItemsRoute","matchversion","logoImagePath","aggregateDashboardRoute","aggregateDashboardProjectViewRoute","aggregateFilterListRoute","kpimastermapRoute","acrossviewkpiRoute","aggregateProjectSettingsRoute","saveOrgHierarchyRoute","kpiDataRoute","saveKpiDataRoute","search","getPromise","mydashboard","username","myowner","owners","updateOwners","put","detail","create","post","success","error","delete","rename","newDashboardName","dashboardType","aggrFlag","postData","JSON","upsertWidget","dashboardId","widget","widgetId","widgetUrl","baseUrl","types","getComponent","componentId","myComponentRoute","updateBusItems","getMatchVersions","getLogoImage","getAggregateDashboard","viewType","getAggregateFilteredlist","queryParam","getKpimastermap","getAcrossviewkpi","firstKpi","graphtype","kpiRequestType","secondKpi","getAggregateProjectSetting","saveOrgHierarchy","getKpiData","saveKpiData","fetchWidgetHoverText","dataObj","fetchHelpers","HealthService","_classCallCheck","_health","servicesModule","_teamDashboard","TeamDashboardController","$controller","resolve","reject","setTimeout","layout","classes","happiness","backlogToDOR","storyDORtoDOD","dodToLive","sprintPredictability","backlogHealth","ciTime","techDebit","jUnitCoverage","TeamDashboardComponent","template","TeamDashboardTemplate","default","controller","_status","StatusController","healthService","_this","collectors","StatusComponent","StatusTemplate","_inputTextareaComponent","Controller","placeholder","InputTextareaComponent","Template","bindings","description","_inputNumberComponent","InputTextComponent","_inputTextComponent","required","_basicComponent","BasicController","BasicComponent","BasicTemplate","content","componentsModule","InputNumberComponent","_customWidget","$stateProvider","url","component","$provide","$delegate","directive","customWidgetTemplate","css","location","window","Error","protocol","host","currentDir","pathname","replace","fullMatch","origUrl","newUrl","unquotedOrigUrl","$1","test","indexOf","stringify","fn","memo","stylesInDom","isOldIE","document","all","atob","apply","arguments","getElement","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","singleton","singletonCounter","stylesInsertedAtTop","fixUrls","addStylesToDom","styles","domStyle","refs","j","parts","push","addStyle","listToStyles","list","newStyles","base","part","media","sourceMap","insertStyleElement","style","insertInto","lastStyleElementInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","before","removeStyleElement","parentNode","removeChild","idx","splice","createStyleElement","createElement","addAttrs","el","keys","forEach","key","setAttribute","obj","update","remove","result","transform","styleIndex","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","rel","createLinkElement","autoFixUrls","convertToAbsoluteUrls","unescape","encodeURIComponent","blob","oldSrc","href","styleSheet","cssText","createTextNode","newObj","DEBUG","newList","mayRemove","textStore","replaceText","replacement","filter","Boolean","join","cssNode","childNodes","useSourceMap","toString","map","cssMapping","sourceMapping","sourceURLs","sources","source","sourceRoot","concat","cssWithMappingToString","mediaQuery","alreadyImportedModules","version","names","mappings","file","hmr","locals"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = \"<div class=\\\"widget-content\\\">\\n    <div class=\\\"widget-title\\\">\\n        <h6>{{widgetInfo.title}}</h6>\\n        <i ng-if=\\\"widgetInfo.tooltipText\\\" ng-mouseover=\\\"showTooltip($event)\\\" ng-mouseout=\\\"hideTooltip()\\\" data-tooltip-text={{widgetInfo.tooltipText}} class=\\\"fa fa-info\\\" aria-hidden=\\\"true\\\"></i>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type==='text'\\\" class=\\\"widget-body\\\">\\n        <div ng-if=\\\"widgetInfo.data\\\" class=\\\"widget-metric\\\">\\n            <div class=\\\"magnitude-container\\\">\\n                <span ng-class=\\\"{'glyphicon':widgetInfo.name==='storyLeadTime' || widgetInfo.name==='storyLiveLeadTime', 'glyphicon-arrow-up':widgetInfo.data.trend==='up', 'glyphicon-minus':widgetInfo.data.trend==='equal', 'glyphicon-arrow-down':widgetInfo.data.trend==='down'}\\\" class=\\\"symbol\\\">{{widgetInfo.data.symbol}}</span>\\n                <span class=\\\"number\\\">{{widgetInfo.data.value}}</span>\\n            </div> \\n            <span class=\\\"unit\\\">{{widgetInfo.data.unit}}</span>\\n        </div>\\n        <h6 class=\\\"no-data\\\" ng-if=\\\"!widgetInfo.data\\\">\\n            No Data Available\\n        </h6>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type==='multipleTextWidget'\\\" class=\\\"widget-body\\\">\\n        <div ng-repeat=\\\"subWidget in widgetInfo.data\\\" class=\\\"sub-widget\\\" style=\\\"width:{{widgetInfo.width}};\\\">\\n            <div ng-if=\\\"(subWidget.data && subWidget.data.value !== ' ')\\\" class=\\\"widget-metric\\\" ng-click=\\\"widgetInfoClicked(subWidget.name)\\\">\\n                <div class=\\\"magnitude-container\\\">\\n                    <span class=\\\"symbol\\\">{{subWidget.data.symbol}}</span>\\n                    <span class=\\\"number\\\">{{subWidget.data.value}}</span>\\n                </div> \\n                <span class=\\\"unit\\\">{{subWidget.data.unit}}</span>\\n            </div>\\n            <h6 class=\\\"no-data\\\" ng-if=\\\"!subWidget.data\\\" ng-click=\\\"widgetInfoClicked(widgetInfo.type)\\\">\\n                No Data Available\\n            </h6>\\n            <h6 class=\\\"no-data\\\" ng-if=\\\"(subWidget.data && subWidget.data.value === ' ')\\\">\\n                {{subWidget.data.unit}}\\n            </h6>\\n            <span class=\\\"sub-widget-name\\\">{{subWidget.title}}</span>\\n        </div>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type==='doughnut' || widgetInfo.type==='pie'\\\" class=\\\"widget-body\\\">\\n        <div ng-if=\\\"widgetInfo.data\\\" class=\\\"graph-container\\\" ng-class=\\\"{'pie-chart':widgetInfo.type==='pie'}\\\">\\n            <h5 ng-if=\\\"widgetInfo.type==='doughnut'\\\" class=\\\"graph-inner-data\\\">{{widgetInfo.data.data[0]}}{{widgetInfo.data.symbol}}</h5>\\n            <canvas id=\\\"base\\\"\\n                class=\\\"chart-base\\\"\\n                chart-type=\\\"widgetInfo.type\\\"\\n                chart-data=\\\"widgetInfo.data.data\\\"\\n                chart-labels=\\\"widgetInfo.data.labels\\\"\\n                chart-options=\\\"widgetInfo.data.options\\\"\\n                chart-colors=\\\"widgetInfo.data.colors\\\"\\n            ></canvas>\\n        </div>\\n        <h6 class=\\\"no-data\\\" ng-if=\\\"!widgetInfo.data\\\">\\n            No Data Available\\n        </h6>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type==='status'\\\" class=\\\"widget-body\\\">\\n        <i ng-if=\\\"widgetInfo.data && widgetInfo.data.response\\\" class=\\\"fa fa-thumbs-up\\\" aria-hidden=\\\"true\\\"></i>\\n        <i ng-if=\\\"widgetInfo.data && !widgetInfo.data.response\\\" class=\\\"fa fa-thumbs-down\\\" aria-hidden=\\\"true\\\"></i>\\n        <h6 class=\\\"no-data\\\" ng-if=\\\"!widgetInfo.data\\\">\\n            No Data Available\\n        </h6>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type==='table'\\\" class=\\\"widget-body\\\">\\n        <div ng-if=\\\"widgetInfo.data\\\">\\n           <table class=\\\"table-widget\\\">\\n                <tr> \\n                    <td class=\\\"table-widget-header\\\"><b>Priority</b></td>\\n                    <td class=\\\"table-widget-header\\\" ng-repeat=\\\"header in widgetInfo.data\\\">{{header.priority}}</td>\\n                </tr>\\n                <tr>\\n                    <td class=\\\"table-widget-header\\\"><b>Count</b></td>\\n                    <td class=\\\"table-widget-header\\\" ng-repeat=\\\"data in widgetInfo.data\\\">{{data.count}}</td>\\n                </tr>\\n            </table>\\n           \\n        </div>\\n        <h6 class=\\\"no-data\\\" ng-if=\\\"!widgetInfo.data\\\">\\n            No Data Available\\n        </h6>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type==='list'\\\" class=\\\"widget-body\\\">\\n        <div ng-if=\\\"widgetInfo.data\\\">\\n            <ul class=\\\"list-widget\\\" ng-repeat=\\\"item in widgetInfo.data\\\">\\n                <li><a href = \\\"https://tools.publicis.sapient.com/jira/browse/\\\"+{{item.data}}>{{item.data}}</a></li>\\n            </ul>\\n        </div>\\n        <h6 class=\\\"no-data\\\" ng-if=\\\"!widgetInfo.data.length\\\">\\n            No Data Available\\n          \\n        </h6>\\n    </div>\\n\\n    <div ng-if=\\\"widgetInfo.type!=='text' && widgetInfo.type!=='doughnut' && widgetInfo.type!=='pie' && widgetInfo.type!=='status' && widgetInfo.type!=='multipleTextWidget'\\\" class=\\\"widget-body\\\">\\n        <canvas id=\\\"base\\\"           \\n            ng-if=\\\"widgetInfo.data\\\"\\n            class=\\\"chart-base\\\"\\n            height=\\\"200\\\"\\n            chart-type=\\\"widgetInfo.type\\\"\\n            chart-data=\\\"widgetInfo.data.data\\\"\\n            chart-labels=\\\"widgetInfo.data.labels\\\"\\n            chart-series=\\\"widgetInfo.data.series\\\"\\n            chart-options=\\\"chartModalDialog ? widgetInfo.data.dialogoptions : widgetInfo.data.options\\\"\\n            chart-colors=\\\"widgetInfo.data.colors\\\"\\n            chart-dataset-override=\\\"widgetInfo.data.datasetOverride\\\"\\n        ></canvas>            \\n        <h6 class=\\\"no-data\\\" ng-if=\\\"!widgetInfo.data\\\">\\n            No Data Available\\n        </h6>\\n    </div>\\n</div>\"","/**\r\n * Controller for the dashboard route.\r\n * Render proper template.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module(HygieiaConfig.module + '.core')\r\n        .controller('CustomTemplateController', CustomTemplateController);\r\n\r\n    CustomTemplateController.$inject = ['$scope','$rootScope','$http', '$q', 'customDashboardData', 'dashboardData'];\r\n    function CustomTemplateController($scope, $rootScope, $http, $q, customDashboardData, dashboardData ) {\r\n        var ctrl = this,\r\n            widgetHoverText;            \r\n  \r\n        customDashboardData.fetchHelpers().then(function(response) {\r\n            ctrl.resourceHelpers = response;\r\n        });\r\n       \r\n        var pageLoad = function() {\r\n                ctrl.showRadar = false;\r\n                ctrl.startDate = '';\r\n                ctrl.endDate = '' ;\r\n                fetchProjectDetails();\r\n                widgetHoverText = customDashboardData.fetchWidgetHoverText();\r\n            },\r\n\r\n            fetchProjectDetails = function() {\r\n                customDashboardData.fetchProjectDetails().then(function(response) {\r\n                    ctrl.projectDetails = response;\r\n                });\r\n            };\r\n\r\n            ctrl.chartModalDialog= function (selectedChart) {\r\n                ctrl.selectedChart= selectedChart;\r\n                ctrl.chartdata = {};\r\n                ctrl.startDate = '';\r\n                ctrl.endDate = '';\r\n                ctrl.isCalendarOpen = false;\r\n                ctrl.isTrendOverDropdownActive = false;\r\n                switch (selectedChart) {\r\n                    case 'NoOfCheckins':\r\n                        var noOfCheckinsOptions = {\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                enabled: false\r\n                            },\r\n                            scales: {\r\n                            yAxes: [\r\n                                {\r\n                                id: 'y-axis',\r\n                                type: 'linear',\r\n                                display: true,\r\n                                position: 'left',\r\n                                ticks: {\r\n                                    fontSize: 10\r\n                                }\r\n                                }\r\n                            ],\r\n                            xAxes: [\r\n                                {\r\n                                id: 'x-axis',\r\n                                display: true,\r\n                                ticks: {\r\n                                    fontSize: 10\r\n                                },\r\n                                gridLines: {\r\n                                    display: false\r\n                                }\r\n                                }\r\n                            ]\r\n                            }\r\n                        };\r\n                        ctrl.chartdata = _.assign({}, ctrl.noOfCheckins);\r\n                        if(ctrl.chartdata.data) {\r\n                            ctrl.chartdata['data']['dialogoptions'] = noOfCheckinsOptions;\r\n                        }\r\n                        break;\r\n                    case 'FlowEfficiency':\r\n                        ctrl.isCalendarOpen = false;\r\n                        var flowEfficiencyOptions = {\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                enabled: false\r\n                            },\r\n                            scales: {\r\n                            yAxes: [\r\n                                {\r\n                                id: 'y-axis',\r\n                                type: 'linear',\r\n                                display: true,\r\n                                position: 'left',\r\n                                ticks: {\r\n                                    fontSize: 10\r\n                                }\r\n                                }\r\n                            ],\r\n                            xAxes: [\r\n                                {\r\n                                id: 'x-axis',\r\n                                display: true,\r\n                                ticks: {\r\n                                    fontSize: 10\r\n                                },\r\n                                gridLines: {\r\n                                    display: false\r\n                                }\r\n                                }\r\n                            ]\r\n                            }\r\n                        }\r\n                        ctrl.chartdata = _.assign({}, ctrl.flowEfficiency);\r\n                        if(ctrl.chartdata.data) {\r\n                            ctrl.chartdata['data']['dialogoptions'] = flowEfficiencyOptions;\r\n                        }\r\n                    break;\r\n\r\n                    case 'CfdData':\r\n                        ctrl.isCalendarOpen = false;\r\n                        var cfdDataOptions = {\r\n                            responsive: true,\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                enabled: false\r\n                            },\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    stacked: true,\r\n                                    ticks  : {\r\n                                        beginAtZero: true,\r\n                                        fontSize: 10\r\n                                    }\r\n                                }],\r\n                                xAxes: [{\r\n                                    stacked: true,\r\n                                    ticks  : {\r\n                                        beginAtZero: true,\r\n                                        fontSize: 10\r\n                                    }\r\n                                }]\r\n                            },\r\n                            fontSize: 20,\r\n                            legend: {\r\n                                display: true,\r\n                                position: 'bottom',\r\n                                labels: {\r\n                                    boxWidth: 10,\r\n                                    fontSize: 14\r\n                                }\r\n                            }\r\n                        };\r\n                        ctrl.chartdata = _.assign({}, ctrl.cfdData);\r\n                        if(ctrl.chartdata.data) {\r\n                            ctrl.chartdata['data']['dialogoptions'] = cfdDataOptions;\r\n                        }\r\n                    break;\r\n\r\n                    case 'AppDemonstration':\r\n                        ctrl.isCalendarOpen = false;\r\n                        var appDemonstrationOptions = {\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                enabled: false\r\n                            },\r\n                            scales: {\r\n                            yAxes: [\r\n                                {\r\n                                id: 'y-axis',\r\n                                type: 'linear',\r\n                                display: true,\r\n                                position: 'left',\r\n                                ticks: {\r\n                                    beginAtZero: true,\r\n                                    fontSize: 10,\r\n                                    fixedStepSize: 1\r\n                                }\r\n                                }\r\n                            ],\r\n                            xAxes: [\r\n                                {\r\n                                id: 'x-axis',\r\n                                display: true,\r\n                                ticks: {\r\n                                    fontSize: 12\r\n                                },\r\n                                gridLines: {\r\n                                    display: false\r\n                                }\r\n                                }\r\n                            ]\r\n                            }\r\n                        };\r\n                        ctrl.chartdata = _.assign({}, ctrl.appDemonstration);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] = appDemonstrationOptions;\r\n                        }                        \r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            };\r\n\r\n            ctrl.applyTrendOverDates = function(selectedDates) {\r\n                ctrl.chartdata = {};\r\n                ctrl.startDate = selectedDates && selectedDates.startDate || '' ;\r\n                ctrl.endDate = selectedDates && selectedDates.endDate || '';\r\n                ctrl.selectedFromSprintList = '';\r\n                ctrl.selectedToSprintList = '';\r\n                switch (ctrl.selectedChart) {\r\n                    case 'autoPercentage':\r\n                        ctrl.fetchTrendOverAutoVsManualTest();\r\n                        break; \r\n                    case 'functionalTestExecutionTime':\r\n                        ctrl.fetchTrendOverFunctionalTestExecutionTime();\r\n                        break;\r\n                    case 'codeBuildTime':\r\n                        ctrl.fetchTrendOverCodeBuildTime();\r\n                        break;\r\n                    case 'timeToFixBrokenBuild':\r\n                        ctrl.fetchTrendOverTimeToFixedBroken();\r\n                        break;\r\n                    case 'backEndJUnit':\r\n                        ctrl.fetchTrendOverBackEndJUnit();\r\n                        break;\r\n                    case 'frontEndJSUnit':\r\n                        ctrl.fetchTrendOverFrontEndJUnit();\r\n                        break;\r\n                    case 'sprintPredictability':\r\n                        ctrl.fetchAllSprintList();\r\n                        ctrl.fetchTrendOverSprintPredictability();\r\n                        break;\r\n                    case 'commitmentReliability':\r\n                        ctrl.fetchAllSprintList();\r\n                        ctrl.fetchTrendOverCommitmentReliability();\r\n                        break;\r\n                    case 'storyLeadTime':\r\n                        ctrl.fetchAllSprintListWithoutStatus();\r\n                        ctrl.fetchTrendOverStoryLeadTime();\r\n                        break;\r\n                    case 'storyLiveLeadTime':\r\n                        ctrl.fetchAllSprintListWithoutStatus();\r\n                        ctrl.fetchTrendOverStoryLiveLeadTime();\r\n                        break;\r\n                    default:\r\n                        ctrl.isTrendOverDropdownActive = false;\r\n                        ctrl.isCalendarOpen = false;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            ctrl.trendOverChartModal = function() {\r\n                ctrl.chartdata = {};\r\n                ctrl.isTrendOverDropdownActive = false;\r\n                switch (ctrl.selectedChart) {\r\n                    case 'autoPercentage':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverAutoVsManualTest);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;\r\n                    case 'functionalTestExecutionTime':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverFunctionalTestExecutionTime);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                         }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;\r\n                    case 'codeBuildTime':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverCodeBuildTime);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                         }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;\r\n                    case 'timeToFixBrokenBuild':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverTimeToFixedBrokenBuild);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                         }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;\r\n                    case 'codeQuality':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverCodeQuality);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;  \r\n                    case 'backEndJUnit':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverBackEndJUnit);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;\r\n                    case 'frontEndJSUnit':\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverFrontEndJUnit);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        ctrl.startDate = ctrl.chartdata.startDate || '';\r\n                        ctrl.endDate = ctrl.chartdata.endDate || '';\r\n                        ctrl.isCalendarOpen = true;\r\n                        break;\r\n                    case 'sprintPredictability':\r\n                        ctrl.isCalendarOpen = false;\r\n                        ctrl.isTrendOverDropdownActive = true;\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverSprintPredictability);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.isApplyTrendOverActive =  false;\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        if(ctrl.chartdata.fromSprint && ctrl.chartdata.toSprint) {\r\n                            ctrl.setFromToSplitList(ctrl.chartdata.fromSprint, ctrl.chartdata.toSprint)\r\n                        }\r\n                        ctrl.tooltipText = ctrl.chartdata.tooltipText;\r\n                        ctrl.paramSprintList = [];\r\n                        break;\r\n                    case 'commitmentReliability':\r\n                        ctrl.isCalendarOpen = false;\r\n                        ctrl.isTrendOverDropdownActive = true;\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverCommitmentReliability);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.isApplyTrendOverActive =  false;\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        if(ctrl.chartdata.fromSprint && ctrl.chartdata.toSprint) {\r\n                            ctrl.setFromToSplitList(ctrl.chartdata.fromSprint, ctrl.chartdata.toSprint)\r\n                        }\r\n                        ctrl.tooltipText = ctrl.chartdata.tooltipText;\r\n                        ctrl.paramSprintList = [];\r\n                        break;\r\n                    case 'storyLeadTime':\r\n                        ctrl.isCalendarOpen = false;\r\n                        ctrl.isTrendOverDropdownActive = true;\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverStoryLeadTime);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.isApplyTrendOverActive =  false;\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        if(ctrl.chartdata.fromSprint && ctrl.chartdata.toSprint) {\r\n                            ctrl.setFromToSplitList(ctrl.chartdata.fromSprint, ctrl.chartdata.toSprint)\r\n                        }\r\n                        ctrl.tooltipText = ctrl.chartdata.tooltipText;\r\n                        ctrl.paramSprintList = [];\r\n                        break;\r\n                    case 'storyLiveLeadTime':\r\n                        ctrl.isCalendarOpen = false;\r\n                        ctrl.isTrendOverDropdownActive = true;\r\n                        ctrl.chartdata = _.assign({}, ctrl.trendOverStoryLiveLeadTime);\r\n                        if(ctrl.chartdata['data']) {\r\n                            ctrl.isApplyTrendOverActive =  false;\r\n                            ctrl.chartdata['data']['dialogoptions'] =  ctrl.chartdata['data']['options'];\r\n                        }\r\n                        if(ctrl.chartdata.fromSprint && ctrl.chartdata.toSprint) {\r\n                            ctrl.setFromToSplitList(ctrl.chartdata.fromSprint, ctrl.chartdata.toSprint)\r\n                        }\r\n                        ctrl.tooltipText = ctrl.chartdata.tooltipText;\r\n                        ctrl.paramSprintList = [];\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            ctrl.fromToSplitList = function(){\r\n                var fromSprint = ctrl.selectedFromSprintList && ctrl.selectedFromSprintList.split(\".\");\r\n                var toSprint = ctrl.selectedToSprintList && ctrl.selectedToSprintList.split(\".\");\r\n                var sprintList = [];\r\n                var fromCounter = fromSprint && parseInt(fromSprint[0]);\r\n                var toCounter = toSprint && parseInt(toSprint[0]);\r\n                if(fromCounter && toCounter && fromCounter >= toCounter){\r\n                   ctrl.errorMessage = 'To sprint must be greater than from sprint';\r\n                   ctrl.isApplyTrendOverActive = true;\r\n                }else {\r\n                    ctrl.isApplyTrendOverActive = false;\r\n                    ctrl.errorMessage = '';\r\n                    ctrl.allSprintList.forEach(function(item) {\r\n                        var sprint = item.split(\".\");\r\n                        if(fromCounter && toCounter && fromCounter <= toCounter && (parseInt(sprint[0]) >= fromCounter && parseInt(sprint[0]) <=toCounter)) {\r\n                            sprintList.push(item)\r\n                        }\r\n                    }, this);\r\n                }\r\n                ctrl.paramSprintList = sprintList;\r\n            }\r\n\r\n            ctrl.setFromToSplitList = function(fromSprint, toSprint){              \r\n                ctrl.allSprintList.forEach(function(item) {\r\n                    var sprint = item.split(\".\");\r\n                    if(sprint[1].trim() == fromSprint.trim()) {\r\n                        ctrl.selectedFromSprintList = item\r\n                    }\r\n                    if(sprint[1].trim() === toSprint.trim()){\r\n                        ctrl.selectedToSprintList = item\r\n                    }\r\n                }, this);              \r\n            }\r\n\r\n            ctrl.customWidgetClick = function(widgetType) {\r\n                ctrl.chartdata = {};\r\n                ctrl.selectedChart = widgetType;                \r\n                ctrl.applyTrendOverDates();\r\n            }\r\n\r\n            ctrl.fetchStoryDORtoDOD = function() {\r\n                var route = '/api/jiraMVP/DorToDod';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'storyDorToDod',\r\n                        title: 'Definition of Ready (DoR) to Definition of Done (DoD)',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.storyDorToDod,\r\n                        data: (response.storyLeadTime && response.storyLeadTime.value) ? response.storyLeadTime : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchStoryDODtoLive = function() {\r\n                var route = '/api/jiraMVP/DodToLive';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'storyDodToLive',\r\n                        title: 'Definition of Done to Live',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.storyDodToLive,\r\n                        data: (response.storyLiveLeadTime && response.storyLiveLeadTime.value) ? response.storyLiveLeadTime : null\r\n                    };\r\n                 });\r\n            };\r\n            \r\n            ctrl.fetchStoryLeadTime = function() {\r\n                var route = '/api/jiraMVP/leadTime';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'storyLeadTime',\r\n                        title: 'Lead Time',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.storyLeadTime,\r\n                        data: (response.storyLeadTime && response.storyLeadTime.value) ? response.storyLeadTime : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchStoryBacklogtoDOR = function() {\r\n                var route = '/api/jiraMVP/backlogToDor';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'storyBacklogToDor',\r\n                        title: 'Backlog to Definition of Ready (DoR)',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.storyBacklogToDor,\r\n                        data: (response.storyLeadTime && response.storyLeadTime.value) ? response.storyLeadTime : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchDefectInjectionRate = function() {\r\n                var route = '/api/jiraMVP/defectinjectionrate';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'defectInjectionRate',\r\n                        title: 'Defect Injection Rate',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.defectInjectionRate,\r\n                        data: (response.defectInjectionRate && response.defectInjectionRate.value) ? response.defectInjectionRate : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchDefectInjectionRatePostlive = function() {\r\n                var route = '/api/jiraMVP/defectinjectionratepostlive';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'defectInjectionRatePostLive',\r\n                        title: 'Defect Injection Rate Post Live',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.defectInjectionRatePostLive,\r\n                        data: (response.defectInjectionRatePostLive && response.defectInjectionRatePostLive.value) ? response.defectInjectionRatePostLive : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchDeploymentFrequency = function() {\r\n                var route = '/api/excel/deployFrequency';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      }\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n                    return {\r\n                    \t name: 'deploymentFrequency',\r\n                         title: 'Deployment Frequency',\r\n                         type: 'line',\r\n                        tooltipText: widgetHoverText.deploymentFrequency,\r\n                        data: graphData\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchNoOfCheckins = function() {\r\n                var route = '/api/ed/commit';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response && response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      }\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n                    var noOfCheckins = {\r\n                        name: 'noOfCheckins',\r\n                        title: 'Number of Check-in Per Day in Master',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.noOfCheckins,\r\n                        data: graphData\r\n                    };\r\n                    ctrl.noOfCheckins = noOfCheckins;\r\n                    return noOfCheckins;\r\n                 }); \r\n            };\r\n\r\n            ctrl.fetchFlowEfficiency = function() {\r\n                var route = '/api/excel/flowefficiency';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      }\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n                    var flowEfficiency = {\r\n                        name: 'flowEfficiency',\r\n                        title: 'Flow Efficiency',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.flowEfficiency,\r\n                        data: graphData\r\n                    };\r\n                    ctrl.flowEfficiency = flowEfficiency;\r\n                    return flowEfficiency;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchCfdData = function() {\r\n                var route = '/api/jiraMVP/cfddetails';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response && response.countList) {\r\n                        graphData = {\r\n                            data: response.countList,\r\n                            labels: response.monthList,\r\n                            series: response.statusList,\r\n                            colors: [\r\n                                '#3f0f99',\r\n                                '#f4424e',\r\n                                '#2b3547',\r\n                                '#1194db',\r\n                                '#24513f',\r\n                                '#09f9d9'\r\n                            ],\r\n                            options: {\r\n                                responsive: true,\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                    yAxes: [{\r\n                                        stacked: true,\r\n                                        ticks  : {\r\n                                            beginAtZero: true,\r\n                                            fontSize: 3\r\n                                        }\r\n                                    }],\r\n                                    xAxes: [{\r\n                                        stacked: true,\r\n                                        ticks  : {\r\n                                            beginAtZero: true,\r\n                                            fontSize: 3\r\n                                        }\r\n                                    }]\r\n                                },\r\n                                fontSize: 8,\r\n                                legend: {\r\n                                    display: true,\r\n                                    position: 'bottom',\r\n                                    labels: {\r\n                                        boxWidth: 3,\r\n                                        fontSize: 3\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    }\r\n                    var cfdData = {\r\n                        name: 'cfd',\r\n                        title: 'Cumulative Flow Diagram',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.cfd,\r\n                        data: graphData\r\n                    };\r\n                    ctrl.cfdData = cfdData;\r\n                    return cfdData;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchEnvCreationTime = function() {\r\n                var route = '/api/ed/citime';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'envCreationTime ',\r\n                        title: 'Time to Create a New Environment',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.envCreationTime,\r\n                        data: (response.envCreationTime && response.envCreationTime.value) ? response.envCreationTime : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchHappinessIndex = function() {\r\n                var route = '/api/excel/happinessindex';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                scales: {\r\n                                    xAxes: [{\r\n                                        display: false\r\n                                    }],\r\n                                    yAxes: [{\r\n                                        ticks: {\r\n                                            beginAtZero: true\r\n                                        }\r\n                                    }]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                hoverBackgroundColor: '#2d9b4f',\r\n                                backgroundColor: '#5fb24f',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n                    return {\r\n                        name: 'happinessIndex',\r\n                        title: 'Happiness Index',\r\n                        type: 'bar',\r\n                        tooltipText: widgetHoverText.happinessIndex,\r\n                        data: graphData\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchAppDemonstration = function() {\r\n                var route = '/api/excel/appdemonstration';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            colors: [\r\n                                '#f8b2b5'\r\n                            ],\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      }\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#ad1852'\r\n                            }\r\n                        };\r\n                    }\r\n                    var appDemonstration = {\r\n                        name: 'appDemonstration',\r\n                        title: 'Completed Stories are Demonstrated to Product Owner',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.appDemonstration,\r\n                        data: graphData\r\n                    };\r\n                    ctrl.appDemonstration = appDemonstration;\r\n                    return appDemonstration;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchSprintPredictability = function() {\r\n                var route = '/api/jiraMVP/sprintpredictability';\r\n                \r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData,\r\n                        sprintPredictablity;\r\n                   \r\n                    if(response && response.sprintPredictablity && response.sprintPredictablity.value) {\r\n                        sprintPredictablity = response.sprintPredictablity.value;\r\n                    }\r\n                      \r\n                    if(sprintPredictablity) {\r\n                        var fillSprintPredictablityPercentage = parseInt(sprintPredictablity) > 100 ? 100 : sprintPredictablity\r\n                        graphData = {\r\n                            data: [sprintPredictablity, 100-fillSprintPredictablityPercentage],\r\n                            symbol: response.sprintPredictablity.unit,\r\n                            colors: [\r\n                                '#2779bc',\r\n                                '#e2e2e2'\r\n                            ],\r\n                            options: {\r\n                                legend: {\r\n                                    display: false\r\n                                },\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                cutoutPercentage: 70\r\n                            }\r\n                        };\r\n                    }\r\n                    return {\r\n                        name: 'sprintPredictablity',\r\n                        title: 'Sprint Predictability',\r\n                        type: 'doughnut',\r\n                        tooltipText: widgetHoverText.sprintPredictablity,\r\n                        data: graphData\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchReleaseDeployTime = function() {\r\n                var route = '/api/ed/citime';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'releaseDeployTime',\r\n                        title: 'Release and Deploy Time',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.releaseDeployTime,\r\n                        data: (response.relAndDeployTime && response.relAndDeployTime.value) ? response.relAndDeployTime : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchAutoVsManualTest = function() {\r\n                var route ='/api/excel/autovsmanualtest';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData,\r\n                        autoPercentage;\r\n\r\n                    if(response && response.autoPercentage && response.autoPercentage.value) {\r\n                        autoPercentage = response.autoPercentage.value;\r\n                    }\r\n\r\n                    if(autoPercentage) {\r\n                        var fillAutoPercentage = parseInt(autoPercentage) > 100 ? 100 : autoPercentage\r\n                        graphData = {\r\n                            data: [autoPercentage, 100-fillAutoPercentage],\r\n                            labels: ['Automated', 'Manual'],\r\n                            colors: [\r\n                                '#b2174f',\r\n                                '#e2e2e2'\r\n                            ],\r\n                            options: {\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                }\r\n                            }\r\n                        };\r\n                    }\r\n                    var autoVsManualTest = {\r\n                        name: 'autoPercentage',\r\n                        title: 'Automated Test %',\r\n                        type: 'pie',\r\n                        tooltipText: widgetHoverText.autoPercentage,\r\n                        data: graphData\r\n                    };\r\n\r\n                    ctrl.autoVsManualTest = autoVsManualTest;\r\n                    return autoVsManualTest;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchCodeQuality = function() {\r\n                var route = '/api/mdquality/static-analysis';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    console.log('comone', response)\r\n                    var graphData,\r\n                        qualityGrade,\r\n                        colors = [\r\n                            '#e2e2e2',\r\n                            '#e2e2e2',\r\n                            '#e2e2e2',\r\n                            '#e2e2e2',\r\n                            '#e2e2e2'\r\n                        ];\r\n\r\n                    qualityGrade = (response && response.qualityGrade) ? response.qualityGrade : null;\r\n                    //qualityGrade = 'A';\r\n\r\n                    switch(qualityGrade) {\r\n                        case 'A':\r\n                            qualityGrade = 5;\r\n                            break;\r\n                        case 'B':\r\n                            qualityGrade = 4;\r\n                            break;\r\n                        case 'C':\r\n                            qualityGrade = 3;\r\n                            break;\r\n                        case 'D':\r\n                            qualityGrade = 2;\r\n                            break;\r\n                        case 'E':\r\n                            qualityGrade = 1;\r\n                            break;\r\n                    };\r\n\r\n                    colors[qualityGrade-1] = '#b2174f';\r\n\r\n                    if(qualityGrade) {\r\n                        graphData = {\r\n                            data: [1,2,3,4,5],\r\n                            labels: ['E','D','C','B','A'],\r\n                            colors: colors,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true,\r\n                                    callbacks: {\r\n                                        label: function() {\r\n                                            return \"\";\r\n                                        }\r\n                                    }\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                        display: false,\r\n                                        gridLines: {\r\n                                            display: false\r\n                                        }\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                        display: true,\r\n                                        ticks: {\r\n                                            fontSize: 7\r\n                                          },\r\n                                        gridLines: {\r\n                                            display: false\r\n                                        }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            }\r\n                        };\r\n                    }\r\n                    return {\r\n                        name: 'codeQuality',\r\n                        title: 'Code Quality',\r\n                        type: 'bar',\r\n                        tooltipText: widgetHoverText.codeQuality,\r\n                        data: qualityGrade !== 'NA' ? graphData : undefined\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchJUnitCoverage = function() {\r\n                var route = '/api/mdquality/static-analysis';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var data,\r\n                        coveragePercentage,\r\n                        jscoveragePercentage;\r\n\r\n                    if(response && response.coveragePercentage && response.coveragePercentage.value) {\r\n                        coveragePercentage = response.coveragePercentage;\r\n                    }\r\n\r\n                    if(response && response.jscoveragePercentage && response.jscoveragePercentage.value) {\r\n                        jscoveragePercentage = response.jscoveragePercentage;\r\n                    }\r\n\r\n                   data = [\r\n                        {\r\n                            name: 'backEndJUnit',\r\n                            title: 'Back End Code Coverage',\r\n                            data: coveragePercentage ? coveragePercentage : null\r\n                        },\r\n                        {\r\n                            name: 'frontEndJSUnit',\r\n                            title: 'Front End Code Coverage',\r\n                            data: jscoveragePercentage ? jscoveragePercentage : null\r\n                        }\r\n                    ];\r\n\r\n                    return {\r\n                        name: 'coveragePercentage',\r\n                        title: 'Coverage',\r\n                        type: 'multipleTextWidget',\r\n                        tooltipText: widgetHoverText.coveragePercentage,\r\n                        width: (100/data.length)+'%',\r\n                        data: data\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchPassPercent = function() {\r\n                var route = '/api/mdquality/static-analysis';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var data,\r\n                        jUnitSuccessPercentage,\r\n                        jsJUnitSuccessPercentage;\r\n\r\n                    if(response && response.jUnitSuccessPercentage && response.jUnitSuccessPercentage.value) {\r\n                        jUnitSuccessPercentage = response.jUnitSuccessPercentage;\r\n                    }\r\n\r\n                    if(response && response.jsJUnitSuccessPercentage && response.jsJUnitSuccessPercentage.value) {\r\n                        jsJUnitSuccessPercentage = response.jsJUnitSuccessPercentage;\r\n                    }\r\n\r\n                   data = [\r\n                        {\r\n                            title: 'Pass %',\r\n                            data: jUnitSuccessPercentage ? jUnitSuccessPercentage : null\r\n                        },\r\n                        {\r\n                            title: 'JS Pass %',\r\n                            data: jsJUnitSuccessPercentage ? jsJUnitSuccessPercentage : null\r\n                        }\r\n                    ];\r\n\r\n                    return {\r\n                        name: 'passPercentage',\r\n                        title: 'Pass %',\r\n                        type: 'multipleTextWidget',\r\n                        tooltipText: widgetHoverText.passPercentage,\r\n                        width: (100/data.length)+'%',\r\n                        data: data\r\n                    };\r\n                 });\r\n            };  \r\n\r\n            ctrl.fetchImprovement = function() {\r\n                var route = '/api/excel/improvement';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'improvement',\r\n                        title: 'Improvement',\r\n                        type: 'status',\r\n                        tooltipText: widgetHoverText.improvement,\r\n                        data: (response && response.response !== undefined) ? response : null\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchCITime = function() {\r\n                var fetchFixTime = function() {\r\n                        var route = '/api/ed/citime';\r\n                        return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                            return (response.fixTimeSVU && response.fixTimeSVU.value) ? response.fixTimeSVU : null;\r\n                         });\r\n                    },\r\n\r\n                    fetchBuildTime = function() {\r\n                        var route = '/api/ed/citime';\r\n                        return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                            return (response.buildTimeSVU && response.buildTimeSVU.value) ? response.buildTimeSVU : null;\r\n                         });\r\n                    },\r\n\r\n                    fetchSumTestExecution = function() {\r\n                        var route = '/api/excel/autovsmanualtest';\r\n                        return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                            return (response.sumTestExecution && response.sumTestExecution.value) ? response.sumTestExecution : null;\r\n                         });\r\n                    },\r\n\r\n                    deferred = $q.defer();\r\n\r\n                    $q.all([\r\n\r\n                        fetchFixTime(),\r\n                        fetchBuildTime(),\r\n                        fetchSumTestExecution()\r\n\r\n                    ]).then(function(response) {\r\n                        var data = [\r\n                                {\r\n                                    name: 'timeToFixBrokenBuild',\r\n                                    title: 'Time to fix a Broken Build',\r\n                                    data: response[0] ? response[0] : null\r\n                                },\r\n                                {\r\n                                    name:'codeBuildTime',\r\n                                    title: 'Code Build Time',\r\n                                    data: response[1] ? response[1] : null\r\n                                },\r\n                                {\r\n                                    name:'functionalTestExecutionTime',\r\n                                    title: 'Functional Test Execution Time',\r\n                                    data: response[2] ? response[2] : null\r\n                                }\r\n                            ],\r\n                            widgetData = {\r\n                                name: 'citime',\r\n                                title: 'CI Time',\r\n                                type: 'multipleTextWidget',\r\n                                tooltipText: widgetHoverText.citime,\r\n                                width: (100/data.length)+'%',\r\n                                data: data\r\n                            };\r\n                        deferred.resolve(widgetData);\r\n                    });\r\n\r\n                    return deferred.promise;\r\n            };          \r\n\r\n            ctrl.showMaturityRadar = function(event) {\r\n                var button = $('.radar-button');\r\n                ctrl.showRadar = !ctrl.showRadar;\r\n                if(ctrl.showRadar) {\r\n                    button.text('Executive Dashboard');\r\n                }else {\r\n                    button.text('Maturity Radar');\r\n                    d3.select(\".maturity-radar\").select(\"svg\").remove();\r\n                }\r\n            };\r\n\r\n            ctrl.commitmentReliability = function() {\r\n                var route = '/api/jiraMVP/commitmentReliability';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'commitmentReliability',\r\n                        title: 'Commitment Reliability',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.commitmentReliability,\r\n                        data: (response.commitmentReliability && response.commitmentReliability.value) ? response.commitmentReliability : null\r\n                    };\r\n                 });\r\n            };\r\n            \r\n            ctrl.fetchRisks = function(){\r\n                var route = '/api/jiraMVP/risks';\r\n               \r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'risks',\r\n                        title: 'Risks',\r\n                        type: 'list',\r\n                        tooltipText: widgetHoverText.risks,\r\n                        data:response.dataCount || null\r\n                    };\r\n                });\r\n            };\r\n\r\n            ctrl.fetchTopIssues = function(){\r\n                var route = '/api/jiraMVP/topIssues';\r\n               \r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'topIssues',\r\n                        title: 'Top Issues',\r\n                        type: 'list',\r\n                        tooltipText: widgetHoverText.topIssues,\r\n                        data:response.dataCount || null\r\n                    };\r\n                });\r\n            };\r\n            \r\n            ctrl.fetchIssues = function(){\r\n                var route = '/api/jiraMVP/issues';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'issues',\r\n                        title: 'Issues',\r\n                        type: 'list',\r\n                        tooltipText: widgetHoverText.issues,\r\n                       data:response.dataCount || null\r\n                    };\r\n                });\r\n            };\r\n            \r\n            ctrl.fetchAgingIssue = function(){\r\n                var route = '/api/jiraMVP/agingIssue';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                \treturn {\r\n                        name: 'agingIssue',\r\n                        title: 'Aging Issue',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.agingIssue,\r\n                        data: (response.agingIssueLevel && response.agingIssueLevel.value) ? response.agingIssueLevel : null\r\n                        //data: '{\"agingIssueLevel\":{\"symbol\":\"\",\"value\":\"65\",\"unit\":\"%\"}}'\r\n                    };\r\n                });\r\n            };\r\n            \r\n            ctrl.fetchTechDebt = function(){\r\n                var route = '/api/jiraMVP/techDebt';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'techDebt',\r\n                        title: 'Tech Debt',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.techDebt,\r\n                        data: (response.techDebt && response.techDebt.value) ? response.techDebt : null\r\n                    };\r\n                });\r\n            };\r\n            \r\n            ctrl.fetchSonarTechDebt = function(){\r\n                var route =  '/api/mdquality/static-analysis';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'techDebt',\r\n                        title: 'Sonar Tech Debt',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.sonarTechDebt,\r\n                        data: (response.techDebt && response.techDebt.value) ? response.techDebt : null\r\n                    };\r\n                });\r\n            };\r\n            \r\n           /* ctrl.fetchAssignValueMetric = function() {\r\n                var route = '/api/jiraMVP/assignedMetrics';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData,\r\n                    assignedValuePercentage;\r\n                    \r\n                    if(response && response.assignedValuePercentage && response.assignedValuePercentage.value) {\r\n                    \tassignedValuePercentage = response.assignedValuePercentage;\r\n                    }\r\n\r\n                    if(assignedValuePercentage) {\r\n                        var fillAssignedValuePercentage = parseInt(assignedValuePercentage.value) > 100 ? 100 : assignedValuePercentage.value\r\n                        graphData = {\r\n                            data: [assignedValuePercentage.value, 100-fillAssignedValuePercentage],\r\n                            symbol:\"%\",\r\n                            colors: [\r\n                                '#2779bc',\r\n                                '#e2e2e2'\r\n                            ],\r\n                            options: {\r\n                                legend: {\r\n                                    display: false\r\n                                },\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                cutoutPercentage: 70\r\n                            }\r\n                        };\r\n                   }\r\n                    return {\r\n                        name: 'assignedValuePercentage',\r\n                        title: 'Assign Value Metrics',\r\n                        type: 'doughnut',\r\n                        tooltipText: widgetHoverText.assignedValuePercentage,\r\n                        data: graphData\r\n                    };\r\n                 });\r\n            };           \r\n            */\r\n            ctrl.fetchAssignValueMetric = function() {\r\n                var route = '/api/jiraMVP/assignedMetrics';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'assignedValuePercentage',\r\n                        title: 'Assign Value Metrics',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.assignedValuePercentage,\r\n                        data: (response.assignedValuePercentage && response.assignedValuePercentage.value) ? response.assignedValuePercentage : null\r\n                    };\r\n                 });\r\n            };\r\n           \r\n/*            ctrl.fetchBacklogHealth = function() {\r\n                var route = '/api/jiraMVP/backlogHealth';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData,\r\n                    backlogHealthPercentage;\r\n                    \r\n                    if(response && response.backlogHealthPercentage && response.backlogHealthPercentage.value) {\r\n                    \tbacklogHealthPercentage = response.backlogHealthPercentage;\r\n                    }\r\n                    if(backlogHealthPercentage) {\r\n                        var color  = ctrl.resourceHelpers && ctrl.resourceHelpers.backlogHealthBackgroundColor && ctrl.resourceHelpers.backlogHealthBackgroundColor[colorType]                       \r\n                        var fillBacklogHealthPercentage = parseInt(backlogHealthPercentage.value) > 100 ? 100 : backlogHealthPercentage.value\r\n                        graphData = {\r\n                            data: [backlogHealthPercentage.value, 100-fillBacklogHealthPercentage],\r\n                            symbol:\"%\",\r\n                            colors: [\r\n                                color,\r\n                                '#e2e2e2'\r\n                            ],\r\n                            options: {\r\n                                legend: {\r\n                                    display: false\r\n                                },\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                cutoutPercentage: 70\r\n                            }\r\n                        };\r\n                   }\r\n                    return {\r\n                        name: 'backlogHealthPercentage',\r\n                        title:'Backlog Health',\r\n                        type: 'doughnut',\r\n                        tooltipText: widgetHoverText.backlogHealthPercentage,\r\n                        data: graphData\r\n                    };\r\n                 });\r\n            };  */   \r\n            ctrl.fetchBacklogHealth = function() {\r\n                var route = '/api/jiraMVP/backlogHealth';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'backlogHealthPercentage',\r\n                        title: 'Backlog Health',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.backlogHealthPercentage,\r\n                        data: (response.backlogHealthPercentage && response.backlogHealthPercentage.value) ? response.backlogHealthPercentage : null\r\n                    };\r\n                 });\r\n            };\r\n            \r\n            ctrl.fetchAssignValueTrend = function() {\r\n                var route = '/api/jiraMVP/assignedMetricsTrend';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      }\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 4\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n                    return {\r\n                        name: 'assignmentTrend',\r\n                        title: 'Trend for Assign Value Metrics',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.assignmentValueTrend,\r\n                        data: graphData\r\n                    };\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverAutoVsManualTest = function() {\r\n                var route = '/api/trend/automation?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                               return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '') \r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverAutoVsManualTest = {\r\n                        name: 'TrendOverAutomation',\r\n                        title: 'Trend over automation',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverAutoVsManual,\r\n                        data: graphData,\r\n                        startDate: response.startDate,\r\n                        endDate: response.endDate\r\n                    };\r\n\r\n                    ctrl.trendOverAutoVsManualTest = trendOverAutoVsManualTest;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverAutoVsManualTest;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverFunctionalTestExecutionTime = function() {\r\n                var route = '/api/trend/functionaltest?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                               return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '') \r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverFunctionalTestExecutionTime = {\r\n                        name: 'trendOverFunctionalTestExecutionTime',\r\n                        title: 'Trend over functional test execution',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverFunctionalTestExecutionTime,\r\n                        data: graphData,\r\n                        startDate: response.startDate,\r\n                        endDate: response.endDate\r\n                    };\r\n\r\n                    ctrl.trendOverFunctionalTestExecutionTime = trendOverFunctionalTestExecutionTime;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverFunctionalTestExecutionTime;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverCodeBuildTime = function() {\r\n                var route = '/api/trend/buildTimeTrend?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                               return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '') \r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverCodeBuildTime = {\r\n                        name: 'trendOverCodeBuildTime',\r\n                        title: 'Trend over Code Build Time',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverCodeBuildTime,\r\n                        data: graphData,\r\n                        startDate: response.startDate,\r\n                        endDate: response.endDate\r\n                    };\r\n\r\n                    ctrl.trendOverCodeBuildTime = trendOverCodeBuildTime;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverCodeBuildTime;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverTimeToFixedBroken = function() {\r\n                var route = '/api/trend/fixTimeTrend?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                               return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '') \r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverTimeToFixedBrokenBuild = {\r\n                        name: 'trendOverTimeToFixedBrokenBuild',\r\n                        title: 'Trend over time to fixed broken build',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverTimeToFixedBrokenBuild,\r\n                        data: graphData,\r\n                        startDate: response.startDate,\r\n                        endDate: response.endDate\r\n                    };\r\n\r\n                    ctrl.trendOverTimeToFixedBrokenBuild = trendOverTimeToFixedBrokenBuild;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverTimeToFixedBrokenBuild;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverCodeQuality = function() {\r\n                var route = '/api/trend/codequalitytrend?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n                    if(response.data && response.data.length) {\r\n                        var data = [];\r\n                        var unique = {};\r\n                        var distinct = [];\r\n                        var gradeItem = [\"E\",\"D\",\"C\",\"B\",\"A\"];\r\n                        response.data.forEach(function(item){\r\n                            if(!unique[item]) {\r\n                                distinct.push(item);\r\n                                unique[item] = true;                              \r\n                            }\r\n                            data.push(gradeItem.indexOf(item));\r\n                        })\r\n                       \r\n                        graphData = {\r\n                            data: data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: false\r\n                                },\r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',     \r\n                                      ticks: {\r\n                                        beginAtZero: true,                                       \r\n                                        min: 0,\r\n                                        stepSize: 1,\r\n                                        max:4,\r\n                                        callback: function(value, index, values) {                                         \r\n                                          return [\"A\",\"B\",\"C\",\"D\",\"E\"][index];\r\n                                        },\r\n                                        autoSkip: true,\r\n                                        maxTicksLimit: data.length\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in ' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false                                       \r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverCodeQuality = {\r\n                        name: 'trendOverCodeQuality',\r\n                        title: 'Trend over Code quality',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverCodeQuality,\r\n                        data: graphData,\r\n                        startDate: response.startDate || '',\r\n                        endDate: response.endDate || ''\r\n                    };\r\n\r\n                    ctrl.trendOverCodeQuality = trendOverCodeQuality;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverCodeQuality;\r\n             });\r\n            };\r\n\r\n            ctrl.fetchTrendOverBackEndJUnit = function() {\r\n                var route = '/api/trend/backendjunittrend?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                               return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '') \r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverBackEndJUnit = {\r\n                        name: 'trendOverBackEndJUnit',\r\n                        title: 'Trend over back end JUnit',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverBackEndJUnit,\r\n                        data: graphData,\r\n                        startDate: response.startDate,\r\n                        endDate: response.endDate\r\n                    };\r\n\r\n                    ctrl.trendOverBackEndJUnit = trendOverBackEndJUnit;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverBackEndJUnit;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverFrontEndJUnit = function() {\r\n                var route = '/api/trend/frontendjunittrend?startDate='+ctrl.startDate+'&endDate='+ctrl.endDate+'';\r\n                 return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n\r\n                    if(response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                               return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '') \r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverFrontEndJUnit = {\r\n                        name: 'trendOverFrontEndJUnit',\r\n                        title: 'Trend over front end JUnit',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverFrontEndJUnit,\r\n                        data: graphData,\r\n                        startDate: response.startDate,\r\n                        endDate: response.endDate\r\n                    };\r\n\r\n                    ctrl.trendOverFrontEndJUnit = trendOverFrontEndJUnit;\r\n                    ctrl.trendOverChartModal();\r\n                    return trendOverFrontEndJUnit;\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverSprintPredictability = function() {\r\n                var route = '/api/trend/sprintPredictability';\r\n                return customDashboardData.sendWidgetDetails(route, ctrl.paramSprintList || []).then(function(response) {\r\n                    var graphData;\r\n                    if(response && response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                            if(response.unit === '%') {\r\n                                                return parseFloat(Math.round(label * 100) / 100) + (response.unit || '')  \r\n                                            }else {\r\n                                                return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '')  \r\n                                            }\r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        autoSkip: false\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverSprintPredictability = {\r\n                        name: 'trendOverSprintPredictability',\r\n                        title: 'Trend over sprint predictability',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverSprintPredictability,\r\n                        data: graphData,                       \r\n                        fromSprint: response && response.fromSprint || '',\r\n                        toSprint: response && response.toSprint || ''                     \r\n                    };\r\n\r\n                    ctrl.trendOverSprintPredictability = trendOverSprintPredictability;\r\n                    ctrl.trendOverChartModal();\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverCommitmentReliability = function() {\r\n                var route = '/api/trend/commitmentReliability';\r\n                return customDashboardData.sendWidgetDetails(route, ctrl.paramSprintList || []).then(function(response) {\r\n                    var graphData;\r\n                    if(response && response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                            if(response.unit === '%') {\r\n                                                return parseFloat(Math.round(label * 100) / 100) + (response.unit || '')  \r\n                                            }else {\r\n                                                return parseFloat(Math.round(label * 100) / 100).toFixed(2) + (response.unit || '')  \r\n                                            }\r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        autoSkip: false\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverCommitmentReliability = {\r\n                        name: 'trendOverCommitmentReliability',\r\n                        title: 'Trend over Commitment Reliability',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverCommitmentReliability,\r\n                        data: graphData,                       \r\n                        fromSprint: response && response.fromSprint || '',\r\n                        toSprint: response && response.toSprint || ''                     \r\n                    };\r\n\r\n                    ctrl.trendOverCommitmentReliability = trendOverCommitmentReliability;\r\n                    ctrl.trendOverChartModal();\r\n                 });\r\n            };\r\n            ctrl.fetchDefects = function(){\r\n                var route = '/api/jiraMVP/defectCount';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    var graphData;\r\n                    if(response && response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,//[\"35\", \"5\", \"4\", \"1\"],\r\n                            labels: response.labels,//[\"P4 - Minor\", \"P1 - Blocker\", \"P2 - Critical\", \"P3 - Major\"],//response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true,\r\n                                    fontSize: 3\r\n                                },\r\n                                scales: {\r\n                                yAxes: [\r\n                                    {\r\n                                    id: 'y-axis',\r\n                                    type: 'linear',\r\n                                    display: true,\r\n                                    position: 'left',\r\n                                    ticks: {\r\n                                        beginAtZero: true,\r\n                                        fontSize: 8\r\n                                    }\r\n                                    }\r\n                                ],\r\n                                xAxes: [\r\n                                    {\r\n                                    id: 'x-axis',\r\n                                    display: true,\r\n                                    ticks: {\r\n                                        fontSize: 8\r\n                                    },\r\n                                    gridLines: {\r\n                                        display: false\r\n                                    }\r\n                                    }\r\n                                ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: '#b2174f'\r\n                            }\r\n                        };\r\n                    }\r\n                    return {\r\n                        name: 'defectCount',\r\n                        title: 'Incidents/Defects',\r\n                        type: 'bar',\r\n                        tooltipText: widgetHoverText.defectCount,\r\n                        data: graphData\r\n                    };\r\n                });\r\n            };\r\n\r\n            ctrl.fetchStoryLeadTimeToRelease = function() {\r\n                var route = '/api/jiraMVP/DorToLive';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                    return {\r\n                        name: 'timeToRelease',\r\n                        title: 'Definition of Ready (DoR) to Live',\r\n                        type: 'text',\r\n                        tooltipText: widgetHoverText.storyLeadTime,\r\n                        data: (response.timeToRelease && response.timeToRelease.value) ? response.timeToRelease : null\r\n                    };\r\n                 });\r\n            };\r\n            \r\n            ctrl.fetchTrendOverStoryLeadTime = function() {\r\n                var route = '/api/trend/dorToDod';\r\n                return customDashboardData.sendWidgetDetails(route, ctrl.paramSprintList || []).then(function(response) {\r\n                    var graphData;\r\n                    if(response && response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                            if(response.unit === '%') {\r\n                                                return parseFloat(Math.round(label * 100) / 100) + (response.unit || '')  \r\n                                            }else {\r\n                                                return parseFloat(Math.round(label * 100) / 100) + (response.unit || '')  \r\n                                            }\r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        autoSkip: false\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverStoryLeadTime = {\r\n                        name: 'trendOverStoryLeadTime',\r\n                        title: 'Trend over Story Lead Time',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverStoryLeadTime,\r\n                        data: graphData,                       \r\n                        fromSprint: response && response.fromSprint || '',\r\n                        toSprint: response && response.toSprint || ''                     \r\n                    };\r\n\r\n                    ctrl.trendOverStoryLeadTime = trendOverStoryLeadTime;\r\n                    ctrl.trendOverChartModal();\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchTrendOverStoryLiveLeadTime = function() {\r\n                var route = '/api/trend/dodToLive';\r\n                return customDashboardData.sendWidgetDetails(route, ctrl.paramSprintList || []).then(function(response) {\r\n                    var graphData;\r\n                    if(response && response.data && response.data.length) {\r\n                        graphData = {\r\n                            data: response.data,\r\n                            labels: response.labels,\r\n                            options: {\r\n                                maintainAspectRatio: false,\r\n                                tooltips: {\r\n                                    enabled: true\r\n                                },                                \r\n                                scales: {\r\n                                  yAxes: [\r\n                                    {\r\n                                      id: 'y-axis',\r\n                                      type: 'linear',\r\n                                      display: true,\r\n                                      position: 'left',\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        callback: function(label, index, labels) {\r\n                                            if(response.unit === '%') {\r\n                                                return parseFloat(Math.round(label * 100) / 100) + (response.unit || '')  \r\n                                            }else {\r\n                                                return parseFloat(Math.round(label * 100) / 100) + (response.unit || '')  \r\n                                            }\r\n                                        }\r\n                                      },\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'value in' + (response.unit || '')\r\n                                        },\r\n                                    }\r\n                                  ],\r\n                                  xAxes: [\r\n                                    {\r\n                                      id: 'x-axis',\r\n                                      display: true,\r\n                                      ticks: {\r\n                                        fontSize: 10,\r\n                                        autoSkip: false\r\n                                      },\r\n                                      gridLines: {\r\n                                        display: false\r\n                                      }\r\n                                    }\r\n                                  ]\r\n                                }\r\n                            },\r\n                            datasetOverride: {\r\n                                backgroundColor: 'rgba(0,0,0,0)',\r\n                                borderColor: '#709dca'\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    var trendOverStoryLiveLeadTime = {\r\n                        name: 'trendOverStoryLiveLeadTime',\r\n                        title: 'Trend over Story Live Lead Time',\r\n                        type: 'line',\r\n                        tooltipText: widgetHoverText.trendOverStoryLiveLeadTime,\r\n                        data: graphData,                       \r\n                        fromSprint: response && response.fromSprint || '',\r\n                        toSprint: response && response.toSprint || ''                     \r\n                    };\r\n\r\n                    ctrl.trendOverStoryLiveLeadTime = trendOverStoryLiveLeadTime;\r\n                    ctrl.trendOverChartModal();\r\n                 });\r\n            };\r\n\r\n            ctrl.fetchAllSprintList = function() {\r\n                var route = '/api/jiraMVP/sprintsList';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                  ctrl.allSprintList = response || []\r\n                  ctrl.fromSprintList = response || []\r\n                  ctrl.toSprintList = response || []\r\n                });\r\n            };\r\n\r\n            ctrl.fetchAllSprintListWithoutStatus = function() {\r\n                var route = '/api/jiraMVP/sprintsListWithoutStatus';\r\n                return customDashboardData.fetchWidgetDetails(route).then(function(response) {\r\n                  ctrl.allSprintList = response || []\r\n                  ctrl.fromSprintList = response || []\r\n                  ctrl.toSprintList = response || []\r\n                });\r\n            };\r\n           \r\n            $scope.$watch('$root.logoImage', function() {\r\n                ctrl.logoImage = $rootScope.logoImage || localStorage.getItem('logoImage');\r\n            });\r\n        \r\n        pageLoad();\r\n    }\r\n})();","/**\n * Custom widget directive\n */\n(function () {\n    'use strict';\n\n    angular\n        .module(HygieiaConfig.module + '.core')\n        .directive('customWidget', customWidgetDirective);\n\n    customWidgetDirective.$inject = ['$http'];\n\n    function customWidgetDirective($http) {\n        return {\n            templateUrl: 'app/dashboard/views/custom-widget.html',\n            restrict: 'E',\n            scope: {\n                customWidget: '=',\n                fetchData: '&',\n                chartModalDialog: '=',\n                chartModalData: '=',\n                onWidgetClick: '&'\n            },\n            link: link\n        };\n\n        function link(scope, element, attrs) {\n            var overlayDiv = $('#overlay'),\n                textPopup = $('#textPopup');\n\n            if (scope.chartModalDialog) {\n                scope.$watch('chartModalData', function () {\n                    scope.widgetInfo = scope.chartModalData;\n                });\n            } else {\n                scope.fetchData().then(function (widgetInfo) {\n                    scope.widgetInfo = widgetInfo;\n                });\n            }\n            scope.showTooltip = function (event) {\n                var sourceOffset = $(event.target).offset();\n                overlayDiv.show();\n                textPopup.html('<p>' + $(event.target).attr('data-tooltip-text') + '<br /><a target=\"_blank\" href=\"https://confluence.devops.lloydsbanking.com/display/ENGTRAN/KPI+Definitions\">Further details</a></p>');\n                textPopup.offset({\n                    top: sourceOffset.top,\n                    left: sourceOffset.left + 10\n                });\n            };\n\n            scope.hideTooltip = function (e) {\n                var interval = setInterval(function () {\n                    if (!textPopup.is(':hover')) {\n                        clearInterval(interval)\n                        overlayDiv.hide();\n                    }\n                }, 500);\n            };\n\n            scope.widgetInfoClicked = function (widgetType) {\n                var modalElement = $('.modal');\n                modalElement.modal('show')\n                scope.onWidgetClick({\n                    widgetType: widgetType\n                })\n            }\n        }\n    }\n})();","/**\r\n * Communicates with dashboard methods on the api\r\n */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module(HygieiaConfig.module + '.core')\r\n        .constant('DashboardType', {\r\n            PRODUCT: 'product',\r\n            TEAM: 'team',\r\n            CUSTOM: 'custom'\r\n        })\r\n        .factory('dashboardData', dashboardData);\r\n\r\n    function dashboardData($http, $q) {\r\n        var testSearchRoute = 'test-data/dashboard_search.json';\r\n        var testDetailRoute = 'test-data/dashboard_detail.json';\r\n        var testOwnedRoute='test-data/dashboard_owned.json';\r\n        var testAllUsersRoute= 'test-data/all_users.json';\r\n        var testOwnersRoute = 'test-data/owners.json';\r\n        var  testMatchversion = 'test-data/matchversion.json';\r\n        var testLogoImagePath = 'test-data/logo.json';\r\n        var testAggregateDashboardRoute = 'test-data/aggregate-dashboard.json';\r\n        var testAggregateProjectSettingsRoute = 'test-data/aggregate-project-settings.json';\r\n\r\n        var dashboardRoute = '/api/dashboard';\r\n        var mydashboardRoute = \"/api/dashboard/mydashboard\";\r\n        var myownerRoute = \"/api/dashboard/myowner\";\r\n        var updateBusItemsRoute = '/api/dashboard/updateBusItems'\r\n        var  matchversion = 'api/speedy/getversionmetadata';\r\n        var logoImagePath = 'api/file/logo';\r\n        var aggregateDashboardRoute = 'api/aggregated/gridaccountview';\r\n        var aggregateDashboardProjectViewRoute = 'api/aggregated/gridprojectview';\r\n        var aggregateFilterListRoute = \"api/aggregated/filteredlist\";\r\n        var kpimastermapRoute = \"api/aggregated/kpimastermap\";\r\n        var acrossviewkpiRoute = \"api/aggregated/acrossviewkpi\";\r\n        var aggregateProjectSettingsRoute = 'api/aggregated/orgHierarchy';\r\n        var saveOrgHierarchyRoute = 'api/aggregated/saveOrgHierarchy';\r\n        var kpiDataRoute = 'api/aggregated/getKpiData';\r\n        var saveKpiDataRoute = 'api/aggregated/saveKpiData';\r\n\r\n        return {\r\n            search: search,\r\n            mydashboard: mydashboard,\r\n            myowner: myowner,\r\n            owners: owners,\r\n            updateOwners: updateOwners,\r\n            detail: detail,\r\n            create: create,\r\n            delete: deleteDashboard,\r\n            rename: renameDashboard,\r\n            upsertWidget: upsertWidget,\r\n            types: types,\r\n            getComponent:getComponent,\r\n            updateBusItems:updateBusItems,\r\n            getMatchVersions: getMatchVersions,\r\n            getLogoImage: getLogoImage,\r\n            getAggregateDashboard: getAggregateDashboard,\r\n            getAggregateFilteredlist: getAggregateFilteredlist,\r\n            getKpimastermap: getKpimastermap,\r\n            getAcrossviewkpi: getAcrossviewkpi,\r\n            getAggregateProjectSetting: getAggregateProjectSetting,\r\n            saveOrgHierarchy: saveOrgHierarchy,\r\n            getKpiData: getKpiData,\r\n            saveKpiData: saveKpiData\r\n        };\r\n\r\n        // reusable helper\r\n        function getPromise(route) {\r\n            return $http.get(route).then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n        \r\n        // gets list of dashboards\r\n        function search() {\r\n            return getPromise(HygieiaConfig.local ? testSearchRoute : dashboardRoute);\r\n        }\r\n\r\n        //gets list of owned dashboard\r\n        function mydashboard(username){\r\n          return getPromise(HygieiaConfig.local ? testOwnedRoute : mydashboardRoute);\r\n        }\r\n\r\n        //gets dashboard owner from dashboard title\r\n        function myowner(id)\r\n        {\r\n            return getPromise(HygieiaConfig.local ? testOwnedRoute : myownerRoute + \"/\" + id );\r\n        }\r\n\r\n        //gets component from componentId\r\n        function getComponent(componentId){\r\n            return getPromise(HygieiaConfig.local ? testOwnedRoute : myComponentRoute+ '/' + componentId);\r\n        }\r\n\r\n        function owners(id) {\r\n            return getPromise(HygieiaConfig.local ? testOwnersRoute : dashboardRoute + \"/\" + id + \"/owners\");\r\n        }\r\n        \r\n        function updateOwners(id, owners) {\r\n        \treturn $http.put(dashboardRoute + \"/\" + id + \"/owners\", owners).then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        // gets info for a single dashboard including available widgets\r\n        function detail(id) {\r\n            return getPromise(HygieiaConfig.local ? testDetailRoute : dashboardRoute + '/' + id);\r\n        }\r\n\r\n        // creates a new dashboard\r\n        function create(data) {\r\n            return $http.post(dashboardRoute, data)\r\n                .success(function (response) {\r\n                    return response.data;\r\n                })\r\n                .error(function (response) {\r\n                    return null;\r\n                });\r\n        }\r\n\r\n\r\n        // renames a dashboard\r\n\r\n        function renameDashboard(id,newDashboardName, dashboardType, aggrFlag){\r\n             console.log(\"In data renaming dashboard\");\r\n            var postData= {\r\n                 title: newDashboardName\r\n            }\r\n            if(dashboardType === 'Team') {\r\n                postData.aggrFlag = aggrFlag\r\n            }\r\n            return $http.put(dashboardRoute+\"/rename/\"+id, postData)\r\n                .success(\r\n                    function (response) {\r\n                    return response.data;\r\n                })\r\n                .error (function (response) {\r\n                    console.log(\"Error Occured while renaming Dashboard in Data layer:\"+JSON.stringify(response));\r\n                    return response.data;\r\n                });\r\n        }\r\n\r\n        // deletes a dashboard\r\n        function deleteDashboard(id) {\r\n            return $http.delete(dashboardRoute + '/' + id)\r\n                .then(function (response) {\r\n                    return response.data;\r\n            });\r\n        }\r\n\r\n        function types() {\r\n            return [\r\n                {\r\n                    \"id\": \"team\",\r\n                    \"name\": \"Engineering Team\"\r\n                },\r\n                {\r\n                    \"id\": \"product\",\r\n                    \"name\": \"Product\"\r\n                },\r\n                {\r\n                    \"id\": \"custom\",\r\n                    \"name\": \"Team\"\r\n                }\r\n            ];\r\n\r\n        }\r\n\r\n        // can be used to add a new widget or update an existing one\r\n        function upsertWidget(dashboardId, widget) {\r\n            // create a copy so we don't modify the original\r\n            widget = angular.copy(widget);\r\n\r\n            console.log('New Widget Config', widget);\r\n\r\n            var widgetId = widget.id,\r\n            widgetUrl = widget.baseUrl || 'widget';\r\n\r\n            if (widgetId) {\r\n                // remove the id since that would cause an api failure\r\n                delete widget.id;\r\n            }\r\n\r\n            delete widget.baseUrl;\r\n\r\n            var route = widgetId ?\r\n                $http.put(dashboardRoute + '/' + dashboardId + \"/\" + widgetUrl + \"/\" + widgetId, widget) :\r\n                $http.post(dashboardRoute + '/' + dashboardId + \"/\" + widgetUrl, widget);\r\n\r\n            return route.then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        function updateBusItems(id, data) {\r\n            return $http.put(updateBusItemsRoute+\"/\"+id, data)\r\n                .success(function (response) {\r\n                    return response.data;\r\n                })\r\n                .error(function (response) {\r\n                    return null;\r\n                });\r\n        }\r\n\r\n        //gets list of owned dashboard\r\n        function getMatchVersions(){\r\n            return getPromise(HygieiaConfig.local ? testMatchversion : matchversion);\r\n        }\r\n\r\n        //get logo from db\r\n        function getLogoImage(){\r\n            return getPromise(HygieiaConfig.local ? testLogoImagePath : logoImagePath);\r\n        }\r\n\r\n        // gets aggregrated dashboard\r\n        function getAggregateDashboard(postData, viewType) {            \r\n            var route;\r\n            if(viewType == 'account') {\r\n                route = $http.post(aggregateDashboardRoute, postData);\r\n            }else {\r\n                route = $http.post(aggregateDashboardProjectViewRoute, postData);\r\n            }\r\n            return route.then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        //get aggregrated filterlist\r\n        function getAggregateFilteredlist(postData, queryParam) {\r\n            var route = $http.post(aggregateFilterListRoute+'?selection='+ queryParam, postData);\r\n            return route.then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n        \r\n         //get Kpimastermap\r\n         function getKpimastermap(postData, queryParam) {\r\n            return getPromise(HygieiaConfig.local ? kpimastermapRoute : kpimastermapRoute);\r\n        }\r\n\r\n        //get Acrossviewkpi\r\n        function getAcrossviewkpi(postData, firstKpi, graphtype, kpiRequestType, secondKpi) {\r\n            var route = $http.post(acrossviewkpiRoute+'?firstkpi='+ firstKpi+'&graphtype='+graphtype+'&secondkpi='+secondKpi, postData);\r\n            // return route.then(function (response) {\r\n            //     return response.data;\r\n            // });\r\n\r\n                var deferred = $q.defer();                \r\n                route.success(function (response) {\r\n                       // deferred.resolve(response);\r\n                       deferred.resolve({\r\n                           response: response,\r\n                           kpiRequestType: kpiRequestType\r\n                    })\r\n                    })\r\n                    .error(function (response) {\r\n                        deferred.reject(response);\r\n                    });\r\n\r\n                return deferred.promise;\r\n        }\r\n\r\n        function getAggregateProjectSetting(){\r\n            return getPromise(HygieiaConfig.local ? testAggregateProjectSettingsRoute : aggregateProjectSettingsRoute);\r\n        }\r\n \r\n        function saveOrgHierarchy(postData) {\r\n            var route = $http.post(saveOrgHierarchyRoute, postData);\r\n            return route.then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        function getKpiData(){\r\n            return getPromise(HygieiaConfig.local ? kpiDataRoute : kpiDataRoute);\r\n        }\r\n        function saveKpiData(postData){\r\n            var route = $http.post(saveKpiDataRoute, postData);\r\n            return route.then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n    }\r\n})();\r\n","/**\n * Fetches data for Team Dashboard\n */\n(function () {\n    'use strict';\n\n    angular\n        .module(HygieiaConfig.module + '.core', [])\n        .factory('customDashboardData', customDashboardData);\n    \n    customDashboardData.$inject = ['$http'];\n    function customDashboardData($http) {\n\n        return {\n            fetchProjectDetails: fetchProjectDetails,\n            fetchWidgetDetails: fetchWidgetDetails,\n            fetchWidgetHoverText: fetchWidgetHoverText,\n            sendWidgetDetails: sendWidgetDetails,\n            fetchHelpers : fetchHelpers\n        };\n\n        function fetchProjectDetails() {\n            return $http.get('/api/excel/projectDetails').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function fetchWidgetDetails(route) {\n            return $http.get(route).then(function (response) {\n                return response.data;\n            });\n        }\n\n        function sendWidgetDetails(route, dataObj) {\n            return $http.post(route, dataObj).then(function (response) {\n                return response.data;\n            });\n        }\n                \n        function fetchHelpers() {\n            return $http.get('../helpers/common-resource.json').then(function (response) {\n                return response.data;\n            });\n        }\n        \n        function fetchWidgetHoverText() {\n            return {\n                'storyDorToDod': 'Time taken from ready to start development to reaching definition of done i.e. completing code with all the testing',\n                'storyDodToLive': 'Time taken from definition of done to Complete to Live',\n                'storyBacklogToDor': 'Time taken from Backlog to definition of ready',\n                'storyLeadTime': 'Time taken from Development & Test Complete to Live',\n                'defectInjectionRate': 'Number of defects identified post done (pre-live) over story count',\n                'noOfCheckins': 'Number of check-ins and builds per day on the master branch',\n                'flowEfficiency': \"flow efficiency measures the percentage of time spent actively working on items that are ‘in the system’ and dividing it by the overall lead time which includes both active working time and wait time for those items\",\n                'cfd': 'Statuses of stories for a particular time interval',\n                'envCreationTime': 'Time it takes to new environment for Dev / QA',\n                'happinessIndex': 'Rating provided by the team against 4 parameters: (Work life balance, Recognition, Learning & Innovation) in the standup',\n                'appDemonstration': 'Demonstration to Product owner',\n                'sprintPredictablity': 'The +/- of velocity delivered based on a previous average.  This is calculated by dividing the velocity in the last sprint by the average velocity in the last 3 sprints',\n                'releaseDeployTime': 'Time required to release the packet on Prod like cluster and  bringing the services back for use',\n                'autoPercentage': 'Percent of automated tests (functional and Non functional) over Total tests',\n                'codeQuality': 'The rating given to the project related to the value of its Technical Debt Ratio',\n                'coveragePercentage': 'JUNIT COVERAGE: Code coverage over number of lines of Java code <br> JSUNIT COVERAGE: Code coverage over number of lines of JS code',\n                'passPercentage': 'PASS %: Percentage of test cases getting passed',\n                'improvement': 'Kaizen Mindset - Retrospectives regularly held and action items recorded and progressed',\n                'citime': 'TIME TO FIX A BROKEN BUILD: Time lag between broken (including compilation or quality gate failure) build to the fixed build <br> CODE BUILD TIME: Time required to build the deployable packet, passing all gates of CI  (incl. code quality, sanity etc.) <br> FUNCTIONAL TEST EXECUTION TIME: Time taken to execute the testing',\n                'commitmentReliability': 'The average story points delivered in the last 3 sprints divided by the average story points committed in the last 3 sprints',\n                'techDebt': 'Aggregated effort of all tech stories in given project having label TECH_DEBT',\n                'agingIssue':'Ageing analysis of the open issues,  median of the difference between issue create date and current date',\n                'issues': 'All the open P1 issues of type issue',\n                'sonarTechDebt': 'Aggregated effort from the Sonar related to tech debt',\n                'assignedValuePercentage':'Percentage of stories that have assigned value over overall stories in Current Sprint ',\n                'backlogHealthPercentage': 'The total number of stories in the Product Backlog status at the end of the last sprint divided by the average number of stories delivered in the last 3 sprints.',\n                'assignmentValueTrend': 'Trend of stories that have assigned value over overall stories across sprints in given project',\n                'risks': 'Top n issues of type risk',\n                'topIssues':'Top n Issues',\n                'defectCount': 'Number of open defects based on priority',\n                'deploymentFrequency': 'Number of deployments in last 3 months',\n                'trendOverAutoVsManual': 'Trend over time for auto vs manual test',\n                'trendOverFunctionalTestExecutionTime': 'Trend over functional test execution',\n                'trendOverFrontEndJUnit':'Trend over front end JUnit',\n                'trendOverBackEndJUnit': 'Trend over back end JUnit',\n                'trendOverCodeQuality': 'Trend Over code quality',\n                'trendOverSprintPredictability': 'Trend over sprint predictability',\n                'trendOverCommitmentReliability': 'Trend over commitment reliability',\n                'trendOverTimeToFixedBrokenBuild': 'Trend Over time to fixed broken build',\n                'trendOverCodeBuildTime': 'Trend over code build time',\n                'trendOverStoryLeadTime': 'Trend over story lead time',\n                'trendOverStoryLiveLeadTime': 'Trend over story live lead time',\n                'defectInjectionRatePostLive': 'Number of defects identified post live'\n            };\n        }\n    }\n})();\n","let sapientModule = {};\n\nimport './codebase/src/app/dashboard/core/data-factories/custom-dashboard-data';\nimport './codebase/src/app/dashboard/core/data-factories/dashboard-data';\nimport './codebase/src/app/dashboard/directives/custom-widget';\nimport './codebase/src/components/templates/custom';\n\nexport default sapientModule;\n\n\n\n","let vendorModule = {};\n\nangular.module('app.sapient', [HygieiaConfig.module, HygieiaConfig.module + '.core'])\n//  Declare modules used in the sapient app\nangular.module(HygieiaConfig.module, []);\nangular.module(HygieiaConfig.module + '.core', [])\n\nexport default vendorModule;\n\n\n\n","'use strict'\n\nclass HealthService {\n\n  constructor($http) {\n    console.log('constructor')\n    'ngInject';\n    this.$http = $http;\n  }\n\n  collectors() {\n    return this.$http.get('/api/speedy/health')\n    .then(response => response.data);\n  }\n}\n\nexport default HealthService;\n","let servicesModule = angular.module('app.services', [])\n\nimport HealthService from './health/health'\nservicesModule.service('HealthService', HealthService);\n\nexport default servicesModule;","module.exports = \"<!-- <div class=\\\"wrapper\\\" ng-controller=\\\"CustomTemplateController as template\\\"> -->\\n  <div class=\\\"wrapper\\\">\\n    <div class=\\\"one\\\">\\n      <div class=\\\"category-head cellDoubleWidth\\\" id=\\\"people\\\">\\n        <div>\\n          <img src=\\\"../dist/assets/img/people-icon.png\\\">\\n          <h5>PEOPLE</h5>\\n          <h6>Are people engaged?</h6>\\n        </div>\\n      </div>\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.improvement.classes\\\" fetch-data=\\\"$ctrl.fetchImprovement()\\\"></custom-widget>\\n\\n      <!-- HAPPINESS INDEX -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.happiness.classes\\\" fetch-data=\\\"$ctrl.fetchHappinessIndex()\\\"></custom-widget>\\n      <div class=\\\"category-head cellDoubleWidth\\\" id=\\\"quality\\\">\\n        <div>\\n          <img src=\\\"../dist/assets/img/value-icon.png\\\">\\n          <h5>VALUE</h5>\\n          <h6>Are we delivering value?</h6>\\n        </div>\\n      </div>\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.value.classes\\\" fetch-data=\\\"$ctrl.fetchAssignValueMetric()\\\"></custom-widget>\\n    </div>\\n\\n    <div class=\\\"two\\\">\\n      <div class=\\\"category-head cellQuadWidth\\\" id=\\\"productivity\\\">\\n        <div>\\n          <img src=\\\"../dist/assets/img/productivity-icon.png\\\">\\n          <h5>SPEED</h5>\\n          <h6>Are we going fast?</h6>\\n        </div>\\n      </div>\\n      <!-- <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.backlogToDOR.classes\\\" fetch-data=\\\"$ctrl.fetchStoryBacklogtoDOR()\\\"></custom-widget> -->\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.storyDORtoDOD.classes\\\" fetch-data=\\\"$ctrl.fetchStoryDORtoDOD()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('storyLeadTime')\\\"></custom-widget>\\n\\n      <!-- <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.storyLeadTime.classes\\\" fetch-data=\\\"$ctrl.fetchStoryLeadTime()\\\"></custom-widget> -->\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.dodToLive.classes\\\" fetch-data=\\\"$ctrl.fetchStoryDODtoLive()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('storyLiveLeadTime')\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.sprintPredictability.classes\\\" fetch-data=\\\"$ctrl.fetchSprintPredictability()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('sprintPredictability')\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.commitmentReliability.classes\\\" fetch-data=\\\"$ctrl.commitmentReliability()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('commitmentReliability')\\\"></custom-widget>\\n\\n      <!-- NUMBER OF CHECK-IN PER DAY   -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.noOfCheckins.classes\\\" fetch-data=\\\"$ctrl.fetchNoOfCheckins()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('NoOfCheckins')\\\"></custom-widget>\\n\\n      <!-- CUMULATIVE FLOW DIAGRAM -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.cfdData.classes\\\" fetch-data=\\\"$ctrl.fetchCfdData()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('CfdData')\\\"></custom-widget>\\n\\n      <!-- BACKLOG HEALTH -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.backlogHealth.classes\\\" fetch-data=\\\"$ctrl.fetchBacklogHealth()\\\"></custom-widget>\\n\\n      <!-- CI TIME -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.ciTime.classes\\\" fetch-data=\\\"$ctrl.fetchCITime()\\\" data-toggle=\\\"modal\\\"\\n        focus-element=\\\"autofocus\\\" on-widget-click=\\\"$ctrl.customWidgetClick(widgetType)\\\"></custom-widget>\\n\\n      <!-- TECH DEBT -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.techDebit.classes\\\" fetch-data=\\\"$ctrl.fetchTechDebt()\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.envCreationTime.classes\\\" fetch-data=\\\"$ctrl.fetchEnvCreationTime()\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.releaseDeployTime.classes\\\" fetch-data=\\\"$ctrl.fetchReleaseDeployTime()\\\"></custom-widget>\\n\\n    </div>\\n    <div class=\\\"three\\\">\\n      <div class=\\\"category-head cellDoubleWidth\\\">\\n        <div>\\n          <img src=\\\"../dist/assets/img/quality-icon.png\\\">\\n          <h5>QUALITY</h5>\\n          <h6>Are we building a quality product?</h6>\\n        </div>\\n      </div>\\n      <!-- <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.xxxxxxxx.classes\\\" fetch-data=\\\"$ctrl.fetchDefectInjectionRatePostlive()\\\"></custom-widget> -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.defectInjectionRate.classes\\\" fetch-data=\\\"$ctrl.fetchDefectInjectionRate()\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.autoVsManualTest.classes\\\" fetch-data=\\\"$ctrl.fetchAutoVsManualTest()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('autoPercentage')\\\"></custom-widget>\\n\\n      <!-- CODE QUALITY -->\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.codeQuality.classes\\\" fetch-data=\\\"$ctrl.fetchCodeQuality()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" data-target=\\\".modal-toggle\\\" ng-click=\\\"$ctrl.customWidgetClick('codeQuality')\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.jUnitCoverage.classes\\\" fetch-data=\\\"$ctrl.fetchJUnitCoverage()\\\"\\n        data-toggle=\\\"modal\\\" focus-element=\\\"autofocus\\\" on-widget-click=\\\"$ctrl.customWidgetClick(widgetType)\\\"></custom-widget>\\n\\n      <custom-widget class=\\\"custom-widget\\\" ng-class=\\\"$ctrl.layout.appDemonstration.classes\\\" fetch-data=\\\"$ctrl.fetchAppDemonstration()\\\"></custom-widget>\\n    </div>\\n  </div>\\n\"","import TeamDashboardTemplate from './team-dashboard.html';\n\nclass TeamDashboardController {\n\n  constructor(HealthService, $q, $scope, $controller) {\n    'ngInject'; // ng-annotate\n\n    this.$controller = $controller;\n    this.$scope = $scope;  \n\n    this.fetchData = function(){\n      return $q(function(resolve, reject) {\n        setTimeout(resolve({\n          title: 'Mocked Widget'\n        }), 1);\n      })   \n    };\n  }\n\n  $onInit() {\n\n    // this.layout = {\n    //   speed: [{\n    //     classes: ['cellDoubleWidth'],\n    //     visible: true\n    //   },{\n    //     visible: true\n    //   }]\n    // }\n\n    var defaultLayout = {\n      improvement: {\n          classes: 'cellDoubleWidth'\n      },\n      happiness: {\n          classes: 'cellDoubleWidth cellDoubleHeight'\n      },\n      value: {\n          classes: 'cellDoubleWidth'\n      },\n      backlogToDOR: {\n          classes: 'cellDoubleWidth'\n      },\n      storyDORtoDOD: {\n          classes: 'cellDoubleWidth'\n      },\n      dodToLive: {\n          classes: 'cellDoubleWidth'\n      },\n      storyLeadTime: {\n          classes: 'cellDoubleWidth'\n      },\n      sprintPredictability: {\n          classes: ''\n      },\n      commitmentReliability: {\n          classes: ''\n      },\n      cfdData: {\n          classes: 'cellDoubleWidth'\n      },\n      backlogHealth: {\n          classes: 'cellDoubleWidth'\n      },\n      noOfCheckins: {\n          classes: 'cellDoubleWidth'\n      },\n      ciTime: {\n          classes: 'cellTripleWidth'\n      },\n      releaseDeployTime: {\n          classes: ''\n      },\n      techDebit: {\n          classes: ''\n      },\n      envCreationTime: {\n          classes: ''\n      },\n      defectInjectionRate: {\n          classes: ''\n      },\n      autoVsManualTest: {\n          classes: ''\n      },\n      codeQuality: {\n          classes: 'cellDoubleWidth'\n      },\n      jUnitCoverage: {\n          classes: 'cellDoubleWidth'\n      },\n      appDemonstration: {\n          classes: 'cellDoubleWidth'\n      }\n\n      \n      \n    }\n    \n    this.layout = defaultLayout;\n\n    angular.extend(this, this.$controller('CustomTemplateController', {$scope: this.$scope}));\n\n    console.log(this)\n\n\n    \n\n  }\n}\n\nlet TeamDashboardComponent = {\n  template: TeamDashboardTemplate,\n  controller: TeamDashboardController\n}\n\nexport default TeamDashboardComponent;\n","module.exports = \"<div class=\\\"statusPage\\\">\\n  <div class=\\\"col-lg-8 col-lg-push-2\\\">\\n    <div class=\\\"widget-modal r\\\">\\n      <div class=\\\"widget-modal-heading\\\">\\n        <h1 class=\\\"page-header\\\">Collectors status</h1>\\n      </div>\\n      <div class=\\\"widget-modal-body\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>Status</th>\\n              <th>Name</th>\\n              <th>Last Execution</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr ng-repeat-start=\\\"collector in $ctrl.collectors\\\">\\n              <td>\\n                <span ng-if=\\\"!collector.errors.length\\\" class=\\\"glyphicon glyphicon-thumbs-up \\\"></span>\\n                <span ng-if=\\\"collector.errors.length\\\" class=\\\"glyphicon glyphicon-thumbs-down\\\"></span>\\n              </td>\\n              <td>{{collector.collectorName}}</td>\\n              <td>{{collector.lastExecuted | date:'EEE, dd MMM @ HH:mm a'}}</td>\\n            </tr>\\n            <tr ng-repeat-end ng-if=\\\"collector.errors.length\\\">\\n              <td colspan=\\\"3\\\">\\n                <div class=\\\"alert alert-danger\\\">\\n                  <p ng-if=\\\"collector.errors.length\\\"><strong>{{collector.errors[0].errorCode}}</strong>: {{collector.errors[0].errorMessage}}</p>\\n                </div>\\n              </td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import StatusTemplate from './status.html';\n\nclass StatusController {\n\n  constructor(HealthService) {\n    this.healthService = HealthService;\n  }\n\n  $onInit() {\n    this.healthService.collectors()\n    .then(data => {\n      this.collectors = data;\n    })\n  }\n}\n\nlet StatusComponent = {\n  template: StatusTemplate,\n  controller: StatusController\n}\n\nStatusController.$inject = ['HealthService']\n\nexport default StatusComponent;\n","module.exports = \"<div class=\\\"form-group\\\">\\n\\t<label>{{$ctrl.name}}\\n    <span ng-if=\\\"$ctrl.description\\\" class=\\\"glyphicon glyphicon-question-sign\\\" uib-tooltip=\\\"{{$ctrl.description}}\\\" tooltip-placement=\\\"top-left\\\"></span>\\n  </label>\\n  <textarea class=\\\"form-control json\\\" ng-model=\\\"$ctrl.value\\\"></textarea>\\n</div>\"","import Template from './input-textarea.component.html';\n\nclass Controller {\n\n  constructor() {}\n\n  $onInit() {}\n\n  $onChanges() {\n    this.placeholder = this.placeholder || this.name;\n  }\n}\n\nlet InputTextareaComponent = {\n  template: Template,\n  bindings: {\n    value: '=',\n    name: '@',\n    description: '@'\n  },\n  controller: Controller\n}\n\nexport default InputTextareaComponent;","module.exports = \"<div class=\\\"form-group\\\">\\n  <label>{{$ctrl.name}}\\n    <span ng-if=\\\"$ctrl.description\\\" class=\\\"glyphicon glyphicon-question-sign\\\" uib-tooltip=\\\"{{$ctrl.description}}\\\" tooltip-placement=\\\"top-left\\\"></span>\\n  </label>\\n  <input type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"{{$ctrl.placeholder}}\\\" ng-model=\\\"$ctrl.value\\\" ng-required=\\\"required\\\">\\n</div>\\n\"","import Template from './input-number.component.html';\n\nclass Controller {\n\n  constructor() {}\n\n  $onInit() {}\n\n  $onChanges() {\n    this.placeholder = this.placeholder || this.name;\n  }\n}\n\nlet InputTextComponent = {\n  template: Template,\n  bindings: {\n    placeholder: '@',\n    name: '@',\n    description: '@',\n    value: '='\n  },\n  controller: Controller\n}\n\nexport default InputTextComponent;","module.exports = \"<div class=\\\"form-group\\\">\\n  <label>{{$ctrl.name}}\\n    <span ng-if=\\\"$ctrl.description\\\" class=\\\"glyphicon glyphicon-question-sign\\\" uib-tooltip=\\\"{{$ctrl.description}}\\\" tooltip-placement=\\\"top-left\\\"></span>\\n  </label>\\n  <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"{{$ctrl.placeholder}}\\\" ng-model=\\\"$ctrl.value\\\">\\n  <small ng-if=\\\"$ctrl.required\\\" class=\\\"form-text text-muted\\\">\\n    This field is required\\n  </small>\\n</div>\\n\"","import Template from './input-text.component.html';\n\nclass Controller {\n\n  constructor() {}\n\n  $onInit() {}\n\n  $onChanges() {\n    this.placeholder = this.placeholder || this.name;\n  }\n}\n\nlet InputTextComponent = {\n  template: Template,\n  bindings: {\n    placeholder: '@',\n    name: '@',\n    description: '@',\n    required: '@',\n    value: '='\n  },\n  controller: Controller\n}\n\nexport default InputTextComponent;","module.exports = \"<h1>LBG Speedy: {{$ctrl.content}}</h1>\"","import BasicTemplate from './basic.component.html';\n\nclass BasicController {\n\n  constructor() {}\n\n  $onInit() {\n    console.log('basic component initialised');\n  }\n\n  $onChanges() {\n    console.log('basic component changed');\n  }\n\n  $onDestroy() {\n    console.log('basic component destroyed');\n  }\n\n}\n\nlet BasicComponent = {\n  template: BasicTemplate,\n  bindings: {\n    content: '@'\n  },\n  controller: BasicController\n}\n\nexport default BasicComponent;","let componentsModule = angular.module('app.components', [])\n\nimport BasicComponent from './dumb/basic/basic.component'\ncomponentsModule.component('spdyBasic', BasicComponent);\n\nimport InputTextComponent from './dumb/form/input-text/input-text.component'\ncomponentsModule.component('spdyInputText', InputTextComponent);\n\nimport InputNumberComponent from './dumb/form/input-number/input-number.component'\ncomponentsModule.component('spdyInputNumber', InputNumberComponent);\n\nimport InputTextareaComponent from './dumb/form/input-textarea/input-textarea.component'\ncomponentsModule.component('spdyInputTextarea', InputTextareaComponent);\n\nimport StatusComponent from './smart/status'\ncomponentsModule.component('spdyStatus', StatusComponent);\n\nimport TeamDashboardComponent from './smart/team-dashboard'\ncomponentsModule.component('spdyTeamDashboard', TeamDashboardComponent);\n\n// import CustomWidgetComponent from './sapient/custom-widget.component'\n// componentsModule.component('customWidget', CustomWidgetComponent);\n\nexport default componentsModule;","import './components';\nimport './services';\nimport './vendor';\nimport './vendor/sapient';\n\nimport customWidgetTemplate from './vendor/sapient/codebase/src/app/dashboard/views/custom-widget.html'\n\nconst MODULE_NAME = 'speedyComponents';\n\nangular.module(MODULE_NAME, ['app.components', 'app.services', 'ui.router', 'app.sapient'])\n.config(function($stateProvider) {\n  $stateProvider.state('statusState', {\n    url: '/status',\n    component: 'spdyStatus'\n  });\n\n  $stateProvider.state('teamDashboardState', {\n    url: '/team-dashboard:id',\n    component: 'spdyTeamDashboard'\n  });\n})\n.config(function($provide) {\n  /**\n   * Hijacking the AngularUI Tabs directive\n   * We need a way to set an active tab based on current router state\n   * By default this is only supported when using tabs via an `ngRepeat` loop.\n   *\n   * @example\n     <tab isactive=\"vm.test(isTrue)\">tab contents</tab>\n  */\n  $provide.decorator('customWidgetDirective', function($delegate) {\n    var directive, link;\n    directive = $delegate[0];\n    link = directive.link;\n\n    delete directive.templateUrl;\n    directive.template = customWidgetTemplate;\n\n    // directive.compile = function() {\n    //   return function Link(scope, element, attrs, ctrls) {\n    //     scope.active = scope.$parent.$eval(attrs.isactive);\n    //     return link.apply(this, arguments);\n    //   };\n    // };\n    return $delegate;\n  });\n})\n// .controller('JozzCustomTemplateController', ['$scope', '$controller', function ($scope, $controller) {\n//   // Initialize the super class and extend it.\n//   angular.extend(this, $controller('CustomTemplateController', {$scope: $scope}));\n  \n//   console.log(this)\n\n// }]);","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"lloyds.less\",\"sourceRoot\":\"\"}]);\n\n// exports\n","\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--6-1!../../node_modules/less-loader/dist/cjs.js??ref--6-2!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js??ref--9-2!./lloyds.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--6-1!../../node_modules/less-loader/dist/cjs.js??ref--6-2!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js??ref--9-2!./lloyds.less\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--6-1!../../node_modules/less-loader/dist/cjs.js??ref--6-2!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js??ref--9-2!./lloyds.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}